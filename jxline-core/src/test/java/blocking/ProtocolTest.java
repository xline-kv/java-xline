package blocking; /*
                   * This Java source file was generated by the Gradle 'init' task.
                   */

import static org.junit.jupiter.api.Assertions.assertNotNull;

import cloud.xline.jxline.impl.blocking.BlockingProtocolClient;

import com.google.protobuf.ByteString;
import com.xline.protobuf.Command;
import com.xline.protobuf.CommandResponse;
import com.xline.protobuf.PutRequest;
import com.xline.protobuf.RequestWithToken;

import io.grpc.Grpc;
import io.grpc.InsecureChannelCredentials;
import io.grpc.ManagedChannel;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

@Nested
class ProtocolTest {
    static BlockingProtocolClient blockingClient;
    Command cmd;

    @BeforeAll
    static void connect() {
        String[] curpMembers = {"172.20.0.3:2379", "172.20.0.4:2379", "172.20.0.5:2379"};

        ArrayList<ManagedChannel> channels = new ArrayList<>();
        for (String curpMember : curpMembers) {
            ManagedChannel channel =
                    Grpc.newChannelBuilder(curpMember, InsecureChannelCredentials.create()).build();
            channels.add(channel);
        }

        blockingClient = new BlockingProtocolClient(channels);
    }

    @BeforeEach
    void toCmd() {
        this.cmd =
                Command.newBuilder()
                        .setRequest(
                                RequestWithToken.newBuilder()
                                        .setPutRequest(
                                                PutRequest.newBuilder()
                                                        .setKey(ByteString.copyFromUtf8("Hello"))
                                                        .setValue(ByteString.copyFromUtf8("Xline"))
                                                        .build())
                                        .build())
                        .build();
    }

    @Test
    void testProposeInFastPath() throws Exception {
        CommandResponse res = blockingClient.propose(cmd, true);
        assertNotNull(res);
    }

    @Test
    void testProposeInSlowPath() throws Exception {
        CommandResponse res = blockingClient.propose(this.cmd, false);
        assertNotNull(res);
    }
}
